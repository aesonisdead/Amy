import { readdirSync, unlinkSync, existsSync, promises as fs } from 'fs'
import path from 'path'
import cp from 'child_process'
import { promisify } from 'util'
import moment from 'moment-timezone'
import fetch from 'node-fetch'
const exec = promisify(cp.exec).bind(cp)
const linkRegex = /https:\/\/chat\.whatsapp\.com\/([0-9A-Za-z]{20,24})/i

const handler = async (m, { conn, text, command, usedPrefix, args }) => {
try {
const nombre = m.pushName || 'Anonymous'
const tag = '@' + m.sender.split('@')[0]
const usertag = Array.from(new Set([...text.matchAll(/@(\d{5,})/g)]), m => `${m[1]}@s.whatsapp.net`)
const chatLabel = m.isGroup ? (await conn.getName(m.chat) || 'Group') : 'Private'
const horario = `${moment.tz('Africa/Casablanca').format('DD/MM/YYYY hh:mm:ss A')}`
switch (command) {
case 'suggest': case 'sug': {
if (!text) return conn.reply(m.chat, '‚ùÄ Write the suggestion you want to send to the Bot owner.', m)
if (text.length < 10) return conn.reply(m.chat, 'üéÄ The suggestion must be more than 10 characters long..', m)
await m.react('üïí')
const sug = `‚ùÄ ùó¶ùó®ùóöùóöùóòùó¶ùóßùóúùó¢ùó° ùó•ùóòùóñùóòùóúùó©ùóòùóó\n\nÍï• *User* ¬ª ${nombre}\n‚ú© *Tag* ¬ª ${tag}\n‚úø *Suggestion* ¬ª ${text}\n‚ú¶ *Chat* ¬ª ${chatLabel}\n‚ú∞ *Date* ¬ª ${horario}\n‚ô§ *InfoBot* ¬ª ${botname} / ${vs}`
await conn.sendMessage(`${suittag}@s.whatsapp.net`, { text: sug, mentions: [m.sender, ...usertag] }, { quoted: m })
await m.react('‚úîÔ∏è')
m.reply('‚ùÄ The suggestion has been sent to the developer. Thank you for helping improve our experience.')
break
}
case 'report': case 'rep': {
if (!text) return conn.reply(m.chat, '‚ùÄ Please enter the error you want to report..', m)
if (text.length < 10) return conn.reply(m.chat, 'üéÄ Please specify the error better, minimum 10 characters.', m)
await m.react('üïí')
const rep = `‚ùÄ ùó•ùóòùó£ùó¢ùó•ùóß ùó•ùóòùóñùóòùóúùó©ùóòùóó\n\nÍï• *User* ¬ª ${nombre}\n‚ú© *Tag* ¬ª ${tag}\n‚úø *Report* ¬ª ${text}\n‚ú¶ *Chat* ¬ª ${chatLabel}\n‚ú∞ *Date* ¬ª ${horario}\n‚ô§ *InfoBot* ¬ª ${botname} / ${vs}`
await conn.sendMessage(`${suittag}@s.whatsapp.net`, { text: rep, mentions: [m.sender, ...usertag] }, { quoted: m })
await m.react('‚úîÔ∏è')
m.reply('‚ùÄ The report has been sent to the developer. Please note that any false reports may result in restrictions on the bot usage.')
break
}
case 'invite': case 'inv': {
if (!text) return m.reply(`‚ùÄ You must send a link to invite the Bot to your group.`)
let [_, code] = text.match(linkRegex) || []
if (!code) return m.reply('üéÄ The invitation link is not valid.')
await m.react('üïí')
const invite = `‚ùÄ ùóúùó°ùó©ùóúùóßùóîùóßùóúùó¢ùó° ùóßùó¢ ùóî ùóöùó•ùó¢ùó®ùó£\n\nÍï• *User* ¬ª ${nombre}\n‚ú© *Tag* ¬ª ${tag}\n‚úø *Chat* ¬ª ${chatLabel}\n‚ú∞ *Date* ¬ª ${horario}\n‚ô§ *InfoBot* ¬ª ${botname} / ${vs}\n‚ú¶ *Link* ¬ª ${text}`
const mainBotNumber = global.conn.user.jid.split('@')[0]
const senderBotNumber = conn.user.jid.split('@')[0]
if (mainBotNumber === senderBotNumber)
await conn.sendMessage(`${suittag}@s.whatsapp.net`, { text: invite, mentions: [m.sender, ...usertag] }, { quoted: m })
else
await conn.sendMessage(`${senderBotNumber}@s.whatsapp.net`, { text: invite, mentions: [m.sender, ...usertag] }, { quoted: m })
await m.react('‚úîÔ∏è')
m.reply('‚ùÄ The link was sent successfully. Thank you for your invitation! ‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö')
break
}
case 'speedtest': case 'stest': {
await m.react('üïí')
const o = await exec('python3 ./lib/ookla-speedtest.py --secure --share')
const { stdout, stderr } = o
if (stdout.trim()) {
const url = stdout.match(/http[^"]+\.png/)?.[0]
if (url) await conn.sendMessage(m.chat, { image: { url }, caption: stdout.trim() }, { quoted: m })
}
if (stderr.trim()) {
const url2 = stderr.match(/http[^"]+\.png/)?.[0]
if (url2) await conn.sendMessage(m.chat, { image: { url: url2 }, caption: stderr.trim() }, { quoted: m })
}
await m.react('‚úîÔ∏è')
break
}
case 'fixmsg': case 'ds': {
if (global.conn.user.jid !== conn.user.jid)
return conn.reply(m.chat, '‚ùÄ Use this command on the main Bot number.', m)
await m.react('üïí')
const chatIdList = m.isGroup ? [m.chat, m.sender] : [m.sender]
const sessionPath = './Sessions/'
let files = await fs.readdir(sessionPath)
let count = 0
for (let file of files) {
for (let id of chatIdList) {
if (file.includes(id.split('@')[0])) {
await fs.unlink(path.join(sessionPath, file))
count++
break
}}}
await m.react(count === 0 ? '‚úñÔ∏è' : '‚úîÔ∏è')
conn.reply(m.chat, count === 0 ? 'üéÄ No files related to your ID were found..' : `üéÄ Eliminated ${count} of session files.`, m)
break
}
case 'script': case 'sc': {
await m.react('üïí')
const res = await fetch('https://api.github.com/repos/aethonxei/Jas-X')
if (!res.ok) throw new Error('Could not get data from repository.')
const json = await res.json()
const txt = `*‰πÇ  S C R I P T  -  M A I N  ‰πÇ*\n\n‚ú© *Name* : ${json.name}\n‚ú© *Visits* : ${json.watchers_count}\n‚ú© *Size* : ${(json.size / 1024).toFixed(2)} MB\n‚ú© *Updated* : ${moment(json.updated_at).format('DD/MM/YY - HH:mm:ss')}\n‚ú© *Url* : ${json.html_url}\n‚ú© *Forks* : ${json.forks_count}\n‚ú© *Stars* : ${json.stargazers_count}\n\n> *${dev}*`
await conn.sendMessage(m.chat, { image: catalogo, caption: txt, ...rcanal }, { quoted: m })
await m.react('‚úîÔ∏è')
break
}}} catch (err) {
await m.react('‚úñÔ∏è')
conn.reply(m.chat, `‚ö†Ô∏é A problem has occurred.\n> Use *${usedPrefix}report* to report it.\n\n${err.message}`, m)
}}

handler.help = ['suggest', 'report', 'invite', 'speedtest', 'fixmsg', 'script']
handler.tags = ['main']
handler.command = ['suggest', 'sug', 'report', 'rep', 'invite', 'inv', 'speedtest', 'stest', 'fixmsg', 'ds', 'sc', 'script']

export default handler
